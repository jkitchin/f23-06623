[{"question": "Which of the following is not a vectorized function?", "type": "multiple_choice", "answers": [{"answer": "np.sin()", "correct": false}, {"answer": "np.sqrt()", "correct": false}, {"answer": "np.sum()", "correct": false}, {"answer": "all are vectorized functions", "correct": true}], "tag": "numpy", "lecture_file": "03_fode_1"}, {"question": "Which of the following will give a 5 rows x 5 columns 2D array of zeros?", "type": "multiple_choice", "answers": [{"answer": "np.zeros(5, 5)", "correct": false}, {"answer": "np.zeros([5, 5])", "correct": true}, {"answer": "5*np.zeros(5)", "correct": false}, {"answer": "np.five(5)", "correct": false}], "tag": "numpy", "lecture_file": "03_fode_1"}, {"question": "If the first and second derivative of a function are zero, then we have a ", "type": "multiple_choice", "answers": [{"answer": "global maximum", "correct": false}, {"answer": "global minimum", "correct": false}, {"answer": "saddle point", "correct": false}, {"answer": "cannot say", "correct": true}], "tag": "derivative", "lecture_file": "03_fode_1"}, {"question": "How to plot the legend in the lower left corner of a matplotlib plot?", "type": "multiple_choice", "answers": [{"answer": "plt.legend(loc = 3)", "correct": true}, {"answer": "plt.lower_left('legend')", "correct": false}, {"answer": "plt.loc('lower left')", "correct": false}, {"answer": "plt.legend('3')", "correct": false}], "tag": "matplotlib", "lecture_file": "03_fode_1"}, {"question": "$5 dy/dx - y*e^x + 5*sin(x) = 0$ ; is a", "type": "multiple_choice", "answers": [{"answer": "homogeneous first-order linear equation", "correct": false}, {"answer": "non-homogeneous first order linear equation", "correct": true}, {"answer": "non-homogeneous first order non-linear equation", "correct": false}, {"answer": "homogeneous first-order non-linear equation", "correct": false}], "tag": "derivative", "lecture_file": "03_fode_1"}, {"question": "The values at which the function 'f' was evaluated when using sol = solve_ivp(f) can be read with", "type": "multiple_choice", "answers": [{"answer": "sol.x", "correct": false}, {"answer": "sol.X", "correct": false}, {"answer": "sol.t", "correct": true}, {"answer": "sol", "correct": false}], "tag": "scipy", "lecture_file": "03_fode_1"}, {"question": "Which of the following does not give an error?", "type": "multiple_choice", "answers": [{"answer": "solve_ivp(f, t_span = (0,1), y0 = y0, t_eval = np.linspace(0, 2))", "correct": false}, {"answer": "solve_ivp(f, t_span = (0,1), y0)", "correct": false}, {"answer": "solve_ivp(f, y0 = y0, t_eval = np.linspace(0,1))", "correct": false}, {"answer": "solve_ivp(f, t_span = [0,1], y0 = y0)", "correct": true}], "tag": "scipy", "lecture_file": "03_fode_1"}, {"question": "A solve_ivp() event occurs when the value the event function", "type": "multiple_choice", "answers": [{"answer": "becomes positive", "correct": false}, {"answer": "is equal to zero", "correct": true}, {"answer": "crosses the event value", "correct": false}, {"answer": "becomes negative", "correct": false}], "tag": "scipy", "lecture_file": "03_fode_1"}, {"question": "solve_ivp() makes solving first-order differential equations easier by", "type": "multiple_choice", "answers": [{"answer": "using an adaptive step size to increase the efficiency of the algorithm", "correct": false}, {"answer": "converging to an acceptable value", "correct": false}, {"answer": "helping to find the value of the independent variable at an instance of the dependent variable", "correct": false}, {"answer": "all of the above", "correct": true}], "tag": "scipy", "lecture_file": "03_fode_1"}, {"question": "Which of the following methods is not available in the solve_ivp() function?", "type": "multiple_choice", "answers": [{"answer": "Euler's Method", "correct": true}, {"answer": "Runge-Kutta", "correct": false}, {"answer": "Backward Differentiation", "correct": false}, {"answer": "LSODA", "correct": false}], "tag": "scipy", "lecture_file": "03_fode_1"}]